// Frequency Analysis.cpp
// Nicholas Bojanowski
// EECE 412

#include "stdafx.h"
#include <string>
#include <iostream>
using namespace std;

char *cipher1 = "LSGPFBRNPNFASNPBFGPHYPUSNPAHHULBCHMAMPSSPURDHGGFFBAMLYPAVBAPULSAHSJLBBLPSNPZHHNJFRBSEVLSPRVUPDHGGFRFLADNULRSHZNPUUHTLBAHSBHJLFGDHGGFRFLAFCUHJMOYHLDPAHSSNPBLJLMMCHHBDHGGFRFLALAHSAHSHBPAFOJNPBNPJFRHVSJFMXLBCDHGGFNPDFGPSHFBHZPBZMFDPLBSNPGLAAMPHWSNPWHUPRSDHGGFFBALBSNPGLAAMPHWSNLRZMFDPJFRFMFUCPHFXSUPPDHGGFFBADHGGFWUHGSNPSHZHWSNPSUPPDHGGFSNPUPDFGPFMHVATVKKLBCBHLRPAHSJLBBLPSNPZHHNRFSAHJBFSSNPWHHSHWSNPSUPPDHGGFZVSNLRNPFATPSJPPBNLRZFJRFBATPCFBSHSNLBX";
char *cipher2 = "WESYMZWEMTBFEMAQNYOREMRSZIFPSCOURCOKEXRSFENVEIZRFCKEUQNVEIZRFCKEULMANMIMSBKOMEIQAQNYORRBDAESHDPIMNMSKBOIEXNMIMSBKOMEIQESISIZSNZFZNYRMHBFWESYMZWEFLGKSDTEXTRZOIEXCRORHMIZMTXMRZBKMIRZSIKRFDEIMFIHSBIDKUKXNDQDMIWRXOKEHPMZORYRQSIWAZLFKBAISDLSDEMYIEQZBFQSWMMFSIZRGTIHMZFHIGDERBZKSMWEWMFXEMPAMNOREDKAMNORWEWMFXEMPAMNORDSWZIEQZHSMIHOYBLFQAICQULSMAYIKEXKMZSIITVEIESBRZVAGFYHQNMAQMCTIEEDMFSIMAHIAMSFSDQULIMNORUHSBMILFQAICQULIMNORSIITZMAIKEHLDSWZIEQZXSMAYIKEIUMINMVICKESWVSCZESPZNIYKCKXAQNYORCWIMEIMFZMSICTMEVCVQAQNYORSIAMXOYCQWMIMBAQNYOREMMRKEOIEXDOSCHOKERAQZYINWMNKOHESIARHVBSAQSPSBDEDAMFMIKOHSIZHMVHQKNVVGKEVCEXLDRSSRQUGTNWEWZMEWMZDOVIHOSBIMQSRSFZQISDSPIMOKEXIRSMKCOKAHKOAZOKDERZVAKITKMNNMKMKEBLCSFQCHBSESIDFDLIKBUYHRQUKOPISQKOKEVCEXVWESKEBLSIIGCSYIQEAQNYORZNITSITHNDQEHFIHZMPQOIQFKEIELSAMORIGCSPDWEMTBFSIKASILFDEDORIKOHESIVIZISMEXQERPZMAQEFBNYLAEOKEXKSNDQSRSWEWMHFGXWQEIDHMEFSNDQSRSKOYSSINMIMDHKCKXSBQNMAIDSNQSRSWEFYSBRZZDBDDHKCKXZMEWMZRSYBZMSKEXTDQYRZBDKOXSNDQSKEHCEXKCKXWESYMZWESYMZDHKCKXZESBRZRERWFHNUSNYMDAIQIZNBIGKOWILFVEHVSDEXIEWCCKSIZCDHSDESOIPDWEXOMESBMSRVSQWEMBNVQUORQKMNORSIDOMFMEAQNYORKRDEKEVGDESIIWCVRCQKMNORKEWMBKZKIQDENDQNZMIMIWZENQMYNVGTQMTNKEPDWEZYSIMXNVARNQKECKOIHDLRMNORKOYSVIZYIZDVDRIWYIIEEIPXNVRZMEIQWEFSMAKEFKZNSPKEBLMWNVSBIEZMYBNZRBSCSNAQNYORDHMEMZDAESZMORINRBEIZSCZKVVGKEHLZMAIHMZNIMSBIEIDPSQSDESMEQITAQNYORDVEAEXNDIHXKAVCZZCVMBFRSCZIMIWPRMNORUHSRROZQNAKEULMAROKONZSNQSKEVCEXIHGKRZAEEXMZXKAVSBQESBRZRBDASNVWEIXHARSMHDOKSDVGPQIZFDLIVEQZZNYMSIWIHVBSMIZENKMVSQNQQKMNORKOWEQFOIHAQUESIHKOIQYSSIESWVSPKOIQHMZNIMSBQHAZMIEMKREXMZSICYMIZEOKHQLSMADVCASESIVWLDIMEIMFIHDASBCVQZYEIHCZKOWIIQYMKSCARZQMTNMIRSWEFYSBQNIHCZWESYMZWEZYQSQPMNORSBQNIHCZNZAQBKEIVWFDZESPZQQUCVQAMNORBEWESYMZWEMTBFSBQIMISRSKARSMNZNQKCSREDEUMIMYFKIFSRFPZCEXEMFZMEVCVQESIEVEDOHDFYZMNVCTKOPSIWXPMZKOWIZFVEHVSESIDENMLFAQMFKEVKFPTPMEVRYSMIETDASBSBQSKOPSIWPRMNORDMFLSIVWMFIHZMSMFPZLMNQMEQMAMZSIAMSUMIWCLFVEEMBKZIEXNZSBISCWWXWIDTSBRZRKQHMEIHMZDHMELRMEHINESIKTMARSAQNYORDHMEMTZCNQSIKAMNORZNYMSIMEMSSDQUSQSFSIKCTIQIQZSQRLAEEMSFSIWCLFAQNYORKOWIFPZFSIIMLFDEXHLFKOWIESIEWEMBIEAQNYORDMLIMNORESIDZIZCPXNZLDCKRSAQNYORYCNVWIEXHISMYRKEIHWEFLSILIKBHTSBNSZQMAESMIEIZSKOHSIZEMSBKEVUBFGTRARUIMIWZMOILRMNORUHZYMEZRFPZQDVMIEIZSZMHMMYOISMPYRSSHDEIMLDQISYMZSBRZZDBDESODNVSPEMZMHOCTNWNARYWEFZMHOSCRFMCIAZTIHXQEIELFEVMIAQNYORKOHEAVSIEUQHWZISMIRVOISRQUZNKCLRMNORESMSNWNAZMSIYTIHNMIMTKMNSBISBKFYZMSIKTNDQSKEHLSBKOTKMNSBMHZQDZWEFLSIVWZIDAWEYDDVQERERKKCIHSIKAMNORDASBSBIMQISDSPIMQKMNORMEIEORFPSQYMVIMFSIMZSIIYMZESQNRKKCIHSIKTCKLFGHTHKOPIMNORKOKEZKMFYBNZSKIQKAMNORZNCTAZQIMNORKOYIKOWVRWDASBSDNTAMEBMIZKSBMIESNVEIWEFLSIVWEIPKNDIHKELQXTMEWESUMIGHTHKOYHBFSIVCHOVWBMQARKHEAQNYORVQSRMFMZAMHUSQKOPYRSBSVISBIHDIPDWESBNHEIYSMVOISBMIRZSBNDQEWIEXCZSBNVVGESQDRCHSREVRAIAQNYORNZDVCASDVIHOKVSBQESRIPQABNQEZRYBOHDHQEIQAQNYORZMSBDEWIDTSILDOIIFNZSDOYRSBSOIITKOHESISBAMDZSDNBYLMNOIEXCRQBZCPIMNORCRQBZCYSVILRMNORSBNVVGMETPKERECVKERZAEQKMNORESIEVEGFYSSDKXNZSIITQSZKESWZKEVQQKMHNDQEVIWDWXWESYMZWESYMZKOHESIVWLZNSZRSBDEHIRZVDRSBSBINDQISDSPIMEKOKDASPKOYIQNMZIHDEMYCAZYSIIMDSCWDQEQYSMVOIFYSBMSREOIEXESODIZSQSFKEFHIGVEDQSQFDLDAZMIMBSBRZAQNYORCZSBNVVGDSWZIENDQEORMXGXZIEXWEXOZEZKFPZLMALRMNORDHMEFSNDQSQOVKZFEWIEAKRHKEHCSMHOEXMZSIKYIMZCSRMEESIWCZZFBIAVEUMINZSXMZKOHESIVWLDAMHXAQNYORZMQAMNORNDIQFDEDHOTPYCNVPDWESYMZWESYMZKOYSSIQKMNORVEEMBKIHEDKAMNORKOYSSIQKMNORCAMNORHMKEVCFYSBMSREOIDAWEDOKAMNORDASBIWKVVGSMAMNUZNBKSMQESQSFNQTBRBSKITZYKSQIMNORNZSNIMHSMIRBVIEXAQNYORZNKCAQGFXEMZHMRKSBIECHBSNZFHIGFHNUSNKCQUWEMBNVAREKHXHQSBNDNDMYQNRSWMSUMIARZCERSRIEAQNYORSBRZESQIMNORWVMNKONZIHGKRZAEOKEXKGZFBKOIEXHDLFKEVHDESIXSROCSPRMNORESNVSPVIHOAQEFQESMYSMVQNXYKSND";

int letterCounts[26] = {0};
double letterHz[26] = {0};
int digraphCounts[26][26] = {{0}};
int diagraphPlayfairCounts[26][26] = {{0}};
int trigraphCounts[26][26][26] = {{{0}}};

// Resets all shared counts to 0
// Important to call when analyzing a different string/character array
void resetCounters()
{
	for (int i = 0; i < 26; i++)
	{
		letterCounts[i] = 0;
		letterHz[i] = 0;
		
		for (int j = 0; j < 26; j++)
		{
			digraphCounts[i][j] = 0;
			diagraphPlayfairCounts[i][j] = 0;

			for (int k = 0; k < 26; k++)
			{
				trigraphCounts[i][j][k] = 0;
			}
		}
	}
}

void printFreq()
{
	for (int i = 0; i < 26; i++)
	{
		printf("%c : %4i : %5.2f%%\n", i + 'A', letterCounts[i], letterHz[i]);
	}
}

// Calculates the frequency of individual characters given an input string
// Prints to the command line with printFreq();
void findLetterHz(char *cipher)
{	
	int cipherLength = strlen(cipher);

	for (int i = 0; i < cipherLength; i++)
	{
		letterCounts[cipher[i] - 'A']++;
	}

	for (int j=0; j < 26; j++)
	{
		letterHz[j] = 100 * (double)letterCounts[j] / cipherLength;
	}

	printFreq();
}

// Calculates the frequency of digraphs given an input string
// Prints to the command line with printFreq();
void findDigraphHz(char *cipher)
{
	int cipherLength = strlen(cipher);

	for (int i = 0; i < cipherLength - 1; i++)
	{
		digraphCounts[cipher[i] - 'A'][cipher[i+1] - 'A']++;
	}

	for (int i = 0; i < 26; i++)
	{
		for (int j = 0; j < 26; j++)
		{
			if (digraphCounts[i][j] > 3)
			{
				printf("%c%c : %3i\t", i + 'A', j + 'A', digraphCounts[i][j]);
			}
		}
	}
}

// Calculates the frequency of Playfair specific digraphs
// given an input string
// Prints to the command line with printFreq();
void findPlayfairDigraphHz(char *cipher)
{
	int cipherLength = strlen(cipher);

	for (int i = 0; i < cipherLength; i += 2)
	{
		diagraphPlayfairCounts[cipher[i] - 'A'][cipher[i+1] - 'A']++;
	}

	for (int i = 0; i < 26; i++)
	{
		for (int j = 0; j < 26; j++)
		{
			if (diagraphPlayfairCounts[i][j] > 3)
			{
				printf("%c%c : %3i\t", i + 'A', j + 'A', diagraphPlayfairCounts[i][j]);
			}
		}
	}
}

// Calculates the frequency of trigraphs given an input string
// Prints to the command line with printFreq()
void findTrigraphHz(char *cipher)
{
	int cipherLength = strlen(cipher);

	for (int i = 0; i < cipherLength - 2; i++)
	{
		trigraphCounts[cipher[i] - 'A'][cipher[i+1] - 'A'][cipher[i+2] - 'A']++;
	}

	for (int i = 0; i < 26; i++)		
	{
		for (int j = 0; j < 26; j++)
		{
			for (int k = 0; k < 26; k++)
			{
				if (trigraphCounts[i][j][k] > 3)
				{
					printf("%c%c%c : %3i\t", i + 'A', j + 'A', k + 'A', trigraphCounts[i][j][k]);
				}
			}
		}
	}
}

int main(void)
{
	// Analysis of Ciphertext 1
	printf("\n\nCipherText 1 Frequency Analysis \n\n");
	findLetterHz(cipher1);
	printf("\n\nCipherText 1 Digraph Count \n\n");
	findDigraphHz(cipher1);
	printf("\n\nCipherText 1 Trigraph Count \n\n");
	findTrigraphHz(cipher1);

	// Reset shared counters to 0
	resetCounters();

	// Analysis of Ciphertext 2
	printf("\n\nCipherText 2 Frequency Analysis \n\n");
	findLetterHz(cipher2);
	printf("\n\nCipherText 2 Digraph Count \n\n");
	findDigraphHz(cipher2);
	printf("\n\nCipherText 2 Playfair Digraph Count \n\nWXYZ will only count WX and YZ, and not XY \n\n");
	// Additional Playfair analysis
	findPlayfairDigraphHz(cipher2);
	printf("\n\nCipherText 2 Trigraph Count \n\n");
	findTrigraphHz(cipher2);

	std::cout << "\n Press Return To Exit...";
	cin.get();

	return 0;
}

